npm - node package manager(2010)
it is a tool that comes bundled with NodeJs
NPM is used to manage packages and dependencies for NodeJS projects,making it easier to install and update libraries and frameworks.

modules-things installed in nodejs core

package-things installed through npm

node script.js for running files

dependencies - projects packages & their dependencies

dev-dependencies - those packages that are needed while development stage but they are of no use after deployment.
 
concurrency -> running multiple files multiple dependencies...


script - start and default scripts( direct script for node index.js)
default script - start, test
custom script -everything else,run script is custom script, and to run this we use (npm run dev)

"color":"echo \"u001b]36mRunning tests...\u001b[39m\" && node script.js",

const http= require('http')

http.createServer([options][,requestListner])

http.createServer(function(req,res){
       res.end("Hello world")
})

server.listen(3000)


"scripts": {
    "start":"node script.js",//default script
     "end":"End of code", //custum script
     "test": "echo \"Error: no test specified\" && exit 1"//default script
   },


->Modules
1)build-in modules - installed in nodejs core
2)local modules - created locally by developer
3)third-party modules - installed via npm package

Built-in modules-
os - provides info about the os
Path - provides utility function for working with file path
fs - File system operation
http - create http 

express - 
express js frameworks ->it is a beckned web application framework or designed
for building web application and apis

it manages everything

it manages everything from receiving the request and giving the response

also called as a npm package


//points between request and response

//it is a request handler that allows you to intercept and manipulate request and response 
before they reach route handlers . they are the function that are invoked by express JS routing layers.


client --------------------->(request) server-----------------> (response)client

------------> parts of server(first one to receive req at server side)--->after processing
   to fronted       <---------   from route to      <----------------- server

->application layer middleware(app.use()->used to log the data of client on console)
->router level middleware
->erro handling middleware
->built-in middleware // used for error handling //written at the last after all routes executed
app.use(express.static('public'))
->third-party middleware

->middleware chaining -> multiple middleware working together to console the data 
                                        or 
  it can be defined as chaining of middleware one after another . hence , creating a chain of
  a function that are executed inorder.

  next() is responsible  for calling the next middleware if there is one.

  ########################### HTTP STATUS CODE ########################################

  -> these are the series of numbers and brief phrases that provide the information
  on the status of url request. each code indicates a different type of  response
  to a request such as success , failure , redirect , client ,error , server error and
  informational response.

  1XX -> informational codes
  2XX -> success code
  3XX -> Redirectional codes
  4XX -> Client error codes
  5xx -> server error codes
url length 1024 bits approx 1mb
---------------------------most common codes-----------------

--> http request mathods..
-->client-server architecture->
1,2,3,n type architecture

p2p network both server both client
thin-client arch..
fat-client arch..


